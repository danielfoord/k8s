name: Run Tests

permissions:
  contents: read
  issues: write
  pull-requests: write
  packages: write

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    # You can either keep 'ubuntu-latest' or explicitly use 'ubuntu-22.04'
    # Using explicit version is recommended for better stability
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Export Docker cache
      - name: Export Docker cache
        run: |
          docker buildx create --use
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --load \
            -f Dockerfile .
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --load \
            -f Dockerfile.test .

      # Move cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Run tests
      - name: Run tests
        run: |
          mkdir -p test-results
          docker compose -f docker-compose.yml -f docker-compose.test.yml up --build --exit-code-from deno-test 2>&1 | tee test-results/test-output.log

      # Upload test results - Updated to v4
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            app/tests/
          retention-days: 7

      # Generate test report
      - name: Generate test report
        if: always()
        run: |
          mkdir -p test-results
          echo "## Test Results" > test-results/report.md
          echo "\`\`\`" >> test-results/report.md
          grep "^deno_test" test-results/test-output.log >> test-results/report.md || echo "No test output found"
          echo "\`\`\`" >> test-results/report.md

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.test.yml down --volumes --remove-orphans

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
