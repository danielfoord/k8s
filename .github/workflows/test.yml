name: Run Tests

permissions:
  issues: write
  pull-requests: write

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    # You can either keep 'ubuntu-latest' or explicitly use 'ubuntu-22.04'
    # Using explicit version is recommended for better stability
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Export Docker cache
      - name: Export Docker cache
        run: |
          docker buildx create --use
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --load \
            -f Dockerfile .
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --load \
            -f Dockerfile.test .

      # Move cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Run tests
      - name: Run tests
        run: |
          mkdir -p test-results
          docker compose -f docker-compose.yml -f docker-compose.test.yml up --build --exit-code-from deno-test 2>&1 | tee test-results/test-output.log

      # Upload test results - Updated to v4
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            app/tests/
          retention-days: 7

      # Generate test report
      - name: Generate test report
        if: always()
        run: |
          mkdir -p test-results
          echo "## Test Results" > test-results/report.md
          echo "\`\`\`" >> test-results/report.md
          if [ -f test-results/test-output.log ]; then
            cat test-results/test-output.log >> test-results/report.md
          else
            echo "No test output found" >> test-results/report.md
          fi
          echo "\`\`\`" >> test-results/report.md

      # Post test results as PR comment
      - name: Post test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-results/report.md', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.test.yml down --volumes --remove-orphans

      # Report job status
      - name: Report status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { job, conclusion } = context;
            const status = conclusion === 'success' ? '✅' : '❌';
            const message = `${status} Test job completed with status: ${conclusion}`;

            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }
